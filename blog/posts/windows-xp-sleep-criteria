##  Windows XP Sleep Criteria

Working today to debug a problem with [Granola](http://grano.la/) that had been reported by a couple of different users, I got the opportunity yet again to get down and dirty with [Windows XP power management](http://msdn.microsoft.com/en-us/library/aa373163(VS.85).aspx#pm_functions_xp_and_earlier). Windows APIs in general can range from robust and well-documented to quirky and confusing. Power management definitely falls into the latter category. It is a less-used API, which means that there are few forums online discussing anything but the most straightforward uses. Add to that the fact that most of the functionality was brand new in XP and was [completely rewritten for Vista](http://download.microsoft.com/download/5/b/9/5b97017b-e28a-4bae-ba48-174cf47d23cd/cpa075_wh06.ppt) and you have a set of functions that can be difficult to use and understand, top to bottom. It&#8217;s almost as if Microsoft never intended for this API to be used.

The problem I tackled today (and attempted to tackle several other times this week) seemed straightforward: some users were reporting that running Granola disabled or made erratic their screensaver coming on, monitor powering down, and computer going to sleep. My first thought was that Granola wasn&#8217;t updating the internal view of the power scheme as the user changed it, but no, that worked fine. My second thought was that perhaps the I/O of logging and communicating over named pipes was causing the machine to stay awake, but that wasn&#8217;t it either. I tried one thing after another, only to be shut down again and again.

Windows uses a fairly [sophisticated set of criteria](http://msdn.microsoft.com/en-us/library/aa373233(VS.85).aspx) for determining an appropriate time to put the monitor and system to sleep. According to the documentation, &#8220;[a]s long as the system determines that there is user or application activity, it will not enter sleep.&#8221; That encompasses the obvious: user interaction is keyboard and mouse activity, application activity is processor utilization, memory activity, or I/O such as network activity. I checked all of these things in turn, only to find that none of them applied. I was obviously not touching the mouse or keyboard; the application itself uses almost no processor, memory, disk, or network. So what was going on?

I&#8217;ll cut the story short here. _Calls to the power management API were being considered user interaction._ The issue causing my confusion was actually twofold: first, these sleep criteria are not really as clear as they seem; second, the power management API was never really intended to be used like Granola uses it. I&#8217;ll speak to the first issue later, but as to the second, clearly the developers of Windows XP thought that only users would be changing the power settings. How they thought the user could be changing them without using the keyboard or mouse is an even more interesting question; perhaps these settings are intrinsically linked to the same structures that monitor user interaction with the console.

Finally, I&#8217;d reached the end of the road. I uploaded a new version of the software that eliminated the power management functionality and indeed the monitor shut down. I waited 2 minutes more for the system to sleep, but no luck. I continued to wait, and the system never slept. Exit the application, and the system sleeps. Start it up again and the system becomes the computer version of [New York](http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=the+city+that+never+sleeps). Oh noes! Not again!!

To cut the story short again: _the system would not sleep while running unvetted software._ &#8220;Unvetted software&#8221; in this instance meant software that hadn&#8217;t been installed by the Windows installer. In Windows XP and later versions of Windows, running software that wasn&#8217;t put on the system by an installer produces a UI alert asking the user if it is OK to run the software _even if the software was signed by a valid signature._ Allowing the software to run apparently puts the system into such a state that it cannot sleep, even though it CAN power down the monitor. This is well outside of the documented interface.

And this is the murkiness of the criteria that I was speaking of earlier. Again, &#8220;[a]s long as the system determines that there is user or application activity, it will not enter sleep.&#8221; HOW the system determines this is what is unclear. With a closed-source system like Windows, this statement isn&#8217;t really helpful from an API-specification standpoint. It may as well say &#8220;the system makes an arbitrary decisions that you as an application developer can&#8217;t know about.&#8221; Ultimately, the power management API as it existed in XP was never intended to be used beyond its basic functionality. Why else would the specification be so unclear and sparse in detail?
